 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura? 
954 paquetes

 ** ¿Cuánto tiempo dura la captura?
Haciendo Stadistic/ I/O Graph vemos el tiempo que dura la captura

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
La IP de la maquina donde se ha efectuado la captura es 192.168.1.34 ; es una IP privada debido a que al hacer en nuestro navegador ekiga.net/ip y hacer ifconfig en nuestra terminal vemos cual es la IP publica de nuestra maquina y que esta no coincide con la IP de la maquina de las capturas por ello sabemos que va a ser una IP privada de nuestra maquina.

3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
UDP es mayor con un porcentaje de paquetes de 96.2 a diferencia de TCP con un  porcentaje de paquetes de 2.1; Si es consistente, ya que TCP es util para cuando el tiempo de transmision es menos critico, a diferencia de UDP que es mas util para aplicaciones que necesitan transmision rapida y efectiva, en tiempo real lo que nos interesan es que no se solapen los mensajes y lleguen a tiempo antes de que la informacion se caduque.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
El otro protocolo que encontramos es Internet Control Message Protocol (ICMP), que se usa para enviar mensajes de error, indicando por ejemplo que un servicio determinado no esta disponible o que un router o host no puede ser localizado.



4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
Display filter : sip. Nos aparacen es los segundos: 7, 14, 16, 31, 38, 39 y 55.

 ** Y los paquetes con RTP, ¿cuándo se envían?
Display filter : rtp. Nos aparecen 21 paquetes en los segndos: 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 y 37.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas? 
El servicio es la asignacion denombres a direcciones IP, que es la funcionalidad del protocolo DNS

 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
La direccion IP del servidor de nombres es : 80.58.61.250

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
La direccion IP que devuelve el servidor de nombres es: 86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
Realiza el proceso inverso , para la resolucion de una direccion IP a su nombre de dominio designado, resolucion DNS inversa.


6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo? 
Si nos vamos al primer paquete HTTP, en el GET encontramos un "[Full request URI: http://ekiga.net/ip/]", por lo que la URL que nos pide es: http://ekiga.net/ip/
 ** ¿Qué user agent (UA) la está pidiendo?
Ekiga\r\n
 ** ¿Qué devuelve el servidor?
En el siguiente paquete de HTTP vemos que el servidor nos envia un: 200 OK con la IP de como el servidor nos ve

 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
Recibimos: 212.128.254.169, esta es la IP publica de nuestra maquina, que no coincide con la IP de line-based text data: text/html (83.36.48.212) que se encuentra en nuestro paquete de respuesta enviado por el servidor, esto nos indica que nos vamos a encontras tras un NAT 


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
STUN es un protocolo de red tipo cliente/servidor que permite a clientes NAT encontrar su direccion IP publica, el tipo de NAT en el que se encuentra y el puerto de Internet asociado con el puerto local a traves de NAT

 ** ¿Estamos tras un NAT?
Si, estamos tras un NAT, como hemos explicado en el  apartado 6 en la ultima pregunta, al no coincidir la IP publica de nuesra maquina con la IP de line-based text data que se encuentra en nuestro paquete de respuesta enviado por el servidor.

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
La IP que tiene el servidor Registar sera la : 86.64.162.35
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
En nuestra captura Dst Port : 5060
 ** ¿Qué método SIP utiliza el UA para registrarse?
Metodo REGISTER, para comunicar la localizacion de usuario
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
EN la captura en : Session Initiation Protocol (REGISTER) en el partado Allow encontramos las instrucciones SIP eque entiende el UA son : INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento? 
No ya que en la trama 50 encontramos un paquete con un Status: 401 Unauthorized
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
Sabremos que el registro se ha realizado correctamente cuando aparezca un paquete con Status: 200 Ok
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
En el paquete 51 encontramos que en el REGISTER hay un campo mas (Authorization: Digest username=....) por ello el tamaño del paquete es mayor (length:712) que el anterior (length:523)
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
Expires: 3600 segundos

10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
Si, Src: 192.168.1.34, sip:500@ekiga.net SIP/2.0
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
El cuerpo de la trama contiene los datos de la sesion; En SDP (Session Description Protocol)
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
No tiene exito debido a que recibimos en la siguiente trama un Status: 407 Proxy Authentication
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
En el paquete de mas abajo en Message Header encontramos una Autorizacion de proxy (Proxy-Authorization), por lo que este paquete tiene un mayor tamaño (length:1181) a diferencia del invite de mas arriba que tiene un tamaño menor (length:982)


11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
RTP y RTTP; RTP para intercambiar paquetes multimedia y RTTP es un protocolo para controlar el flujo
 ** ¿Cuál es el tamaño de paquete de los mismos?
214 bytes
 ** ¿Se utilizan bits de padding?
No hay bits de padding
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
160 ms
 ** ¿Cuántos bits/segundo estamos enviando?
8000bps



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué? 
2 flujos vemos que el destino y el origen son iguales pero los puertos no, esto es debido a que se usa uno para audio(g711A) y otro para video(h261)
 ** ¿Cuántos paquetes se pierden?
Ninguno
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
Para el primer flujo 1290.479 y para el segundo flujo 1290.444, que es el retardo que puede dar entre paquetes
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
MAx jitter: 183.096 y 119.635 ,  Mean jitter: 153.240 y 42.500 ; en cuanto mas alto sea el jitter buffer mejor calidad habra pero a cuanto mayor sea nuestro jitter mayor tendriamos que hacer que sea el jitter buffer por lo que perderia calidad.



13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
0 ambos
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
Si porque el jitter y delta empiezan a contar desde el primer paquete
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
247
 ** ¿A qué se debe el cambio tan brusco del jitter?
Se debe a que hay un cambio brusco en la velocidad de transmision
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
El jitter va a depender del retardo que se produzca, por lo que si el retardo aumenta tambien aumentara el valor de nuestro jitter.


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
24,80 segundos
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
RTP(h261) ---> SSRC: 0x43306582
RTP(g711A)---> SSRC: 0xBF4AFD37
Hay varios porque uno es para audio y otro es para video
no hay CSRCs


15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
BYE
 ** ¿En qué trama(s)?
El primer BYE que se envia es en el paquete 924, aunque encontramos mas tramas con dicho metodo como en la 925 y en la 927
 ** ¿Por qué crees que se envía varias veces?
Porque al ser UDP no es fiable.

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
Para darse de baja con valor expires:0
 ** ¿En qué trama sucede esto?
950
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
En el valor de expires


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
DNS si para poder conocer la IP del servidor Registrar de Ekiga.
STUN no hace falta ya que el ordenador tiene IP publica
 ** ¿Son diferentes el registro y la descripción de la sesión?
no solo cmabian las direcciones


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
2 flujos
 ** ¿Cuál es su periodicidad?
160bytes por paquete por lo cual un periodo de 20ms
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
Max delta: 30.526 y 78.001
Max jitter: 5.389 y 6.551
Mean jitter: 3.207 y 1.263
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
Si, Telephony/RTP/Show All Streams elegimos el flujo  y clicamos en Analyze/Player
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?
Servicio de musica


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
